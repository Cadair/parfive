[build-system]
requires = [
  "setuptools>=62.1",
  "setuptools_scm[toml]>=6.2",
  "wheel",

]
build-backend = "setuptools.build_meta"

[project]
name = "parfive"
description = "A HTTP and FTP parallel file downloader."
readme = {file = "README.rst", content-type = "text/x-rst"}
requires-python = ">=3.7"
license = { file = "LICENSE", content-type = "text/plain" }

authors = [
  { name = "Stuart Mumford", email = "stuart@cadair.com" },
]

dependencies = [
  "tqdm>=4.27.0",
  "aiohttp",
  "typing_extensions;python_version<'3.8'",
]
dynamic = ["version"]

[project.optional-dependencies]
ftp = ["aioftp>=0.17.1"]
tests = ["aiofiles", "pytest", "pytest-asyncio", "pytest-cov", "pytest-localserver", "pytest-socket"]
docs = ["sphinx", "sphinx-automodapi", "tomli; python_version < '3.11'"]
test = ["pytest", "pytest-doctestplus"]

[project.scripts]
parfive = "parfive.main:main"

[project.urls]
repository = "https://parfive.readthedocs.io/"

[tool]
[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]

[tool.setuptools_scm]
write_to = "parfive/version.py"

[tool.pytest.ini_options]
addopts = ["--allow-hosts=127.0.0.1,::1"]
asyncio_mode = "strict"

[tool.coverage.run]
omit = [
 "parfive/__init*",
 "parfive/conftest.py",
 "parfive/*setup_package*",
 "parfive/tests/*",
 "parfive/*/tests/*",
 "parfive/extern/*",
 "parfive/version*",
 "*/parfive/__init*",
 "*/parfive/conftest.py",
 "*/parfive/*setup_package*",
 "*/parfive/tests/*",
 "*/parfive/*/tests/*",
 "*/parfive/extern/*",
 "*/parfive/version*",
]

[tool.coverage.report]
exclude_lines = [
  # Have to re-enable the standard pragma
  "pragma: no cover",
  # Don't complain about packages we have installed
  "except ImportError",
  # Don't complain if tests don't hit assertions
  "raise AssertionError",
  "raise NotImplementedError",
  # Don't complain about script hooks
  "def main(.*):",
  # Ignore branches that don't pertain to this version of Python
  "pragma: py{ignore_python_version}",
  # Don't complain about IPython completion helper
  "def _ipython_key_completions_", 
]
